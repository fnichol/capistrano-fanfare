require 'minitest/autorun'
require 'minitest/capistrano'
require 'capistrano/fanfare'
require 'capistrano/fanfare/bundler'

#
# Rake mixes in FileUtils methods into Capistrano::Configuration::Namespace as
# private methods which will cause a method/task namespace collision when the
# `bundle:install' task is created.
#
# So, if we are in a Rake context, nuke :install in Namespace--we won't be
# it directly in this codebase but this feels so very, very wrong.
#
if defined?(Rake::DSL)
  Capistrano::Configuration::Namespaces::Namespace.class_eval { undef :install }
end

describe Capistrano::Fanfare::Bundler do
  before do
    @config = Capistrano::Configuration.new
    Capistrano::Fanfare::Bundler.load_into(@config)
    @config.extend(MiniTest::Capistrano::ConfigurationExtension)
    @orig_config = Capistrano::Configuration.instance
    Capistrano::Configuration.instance = @config
  end

  after do
    Capistrano::Configuration.instance = @orig_config
  end

  describe "for variables" do
    it "sets :bundle_cmd to use bin/bundle" do
      @config.set :current_release, "/srv/gemmy/releases/thisone"

      @config.fetch(:bundle_cmd).must_equal "/srv/gemmy/releases/thisone/bin/bundle"
    end

    it "sets :bundle_shebang to 'ruby-local-exec'" do
      @config.fetch(:bundle_shebang).must_equal "ruby-local-exec"
    end

    it "sets :bundle_binstub_template to the binstub script" do
      @config.set :bundle_shebang, "jruby"

      @config.fetch(:bundle_binstub_template).must_equal <<-BINSTUB
#!/usr/bin/env jruby
#
# This file was generated by capistrano.
#

require 'pathname'
ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
  Pathname.new(__FILE__).realpath)

require 'rubygems'

load Gem.bin_path('bundler', 'bundle')
      BINSTUB
    end
  end
end
