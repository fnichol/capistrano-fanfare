module Capistrano
  module Fanfare
    module Foreman
      module Strategy

        ##
        # This class defines the abstract interface for all Capistrano
        # Foreman deployment strategies. Subclasses must implement at least the
        # #export, #start, #stop, and #ps methods.

        class Base
          attr_reader :configuration

          ##
          # Instantiates a strategy with a reference to the given configuration.

          def initialize(config = {})
            @configuration = config
          end

          ##
          # Executes the necessary commands to export service definitions, run
          # scripts and all artifacts required by the service backend.

          def export
            raise NotImplementedError, "`export' is not implemented by #{self.class.name}"
          end

          ##
          # Optionally takes the artifacts generated by #export and registers
          # the service(s) with the underlying service backend or operating
          # system. No implementation is required by subclasses, but this
          # method will be invoked unconditionally.

          def register
            # no-op
          end

          ##
          # Executes the necessary commands to start a specific Procfile
          # process group, or to start all process groups when no arguments
          # are provided.

          def start(proc_group = nil)
            raise NotImplementedError, "`start' is not implemented by #{self.class.name}"
          end

          ##
          # Executes the necessary commands to stop a specific Procfile
          # process group, or to stop all process groups when no arguments
          # are provided.

          def stop(proc_group = nil)
            raise NotImplementedError, "`stop' is not implemented by #{self.class.name}"
          end

          ##
          # Executes the necessary commands to restart a specific Procfile
          # process group, or to restart all process groups when no arguments
          # are provided. A default implementation is provided if the subclass
          # does not provide one.

          def restart(proc_group = nil)
            stop(proc_group)
            start(proc_group)
          end

          ##
          # Executes the necessary commands to display the state of running
          # service processes described in the Procfile.

          def ps
            raise NotImplementedError, "`ps' is not implemented by #{self.class.name}"
          end

          protected

          ##
          # This is to allow helper methods like "run" and "put" to be more
          # easily accessible to strategy implementations.

          def method_missing(sym, *args, &block)
            if configuration.respond_to?(sym)
              configuration.send(sym, *args, &block)
            else
              super
            end
          end
        end
      end
    end
  end
end
